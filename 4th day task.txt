Task-1

  public class Person {
	String name;
	int age;
	    public Person(String name) {
	        this.name = name;
	        this.age = 18; 
	    }
	    public Person(String name, int age) {
	        this.name = name;
	        this.age = age;
	    } 
	    public void displayInfo() {
	        System.out.println("Name: " + name + ", Age: " + age);
	    }
	    public String getName() {
	        return name;
	    }

	    public void setName(String name) {
	        this.name = name;
	    }

	    public int getAge() {
	        return age;
	    }

	    public void setAge(int age) {
	        this.age = age;
	    }
	    public static void main(String[] args) {
	       
	        Person person1 = new Person("Prashanth");
	        person1.displayInfo(); 
	    }
	}

Task-2

import java.util.Scanner;
 class Product {
	    int pid;
	    double price;
	    int quantity;

	    public Product(int pid, double price, int quantity) {
	        this.pid = pid;
	        this.price = price;
	        this.quantity = quantity;
	    }

	    public double getTotalPrice() {
	        return price * quantity;
	    }
	}

	public class XYZ {
	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);
	        Product[] products = new Product[5];
	        for (int i = 0; i <=5; i++) {
	            System.out.println("Enter details for product " + (i + 1) + ":");
	            System.out.print("PID: ");
	            int pid = scanner.nextInt();
	            System.out.print("Price: ");
	            double price = scanner.nextDouble();
	            System.out.print("Quantity: ");
	            int quantity = scanner.nextInt();
	            products[i] = new Product(pid, price, quantity);
	        }
	        int highestPricePid = findHighestPricePid(products);
	        System.out.println("PID of the product with the highest price: " + highestPricePid);
	        double totalAmountSpent = calculateTotalAmountSpent(products);
	        System.out.println("Total amount spent on all products: $" + totalAmountSpent);
	    }

	    public static int findHighestPricePid(Product[] products) {
	        double maxPrice = Double.MIN_VALUE;
	        int highestPricePid = -1;
	        for (Product product : products) {
	            if (product.price > maxPrice) {
	                maxPrice = product.price;
	                highestPricePid = product.pid;
	            }
	        }
	        return highestPricePid;
	    }

	    public static double calculateTotalAmountSpent(Product[] products) {
	        double totalAmountSpent = 0;
	        for (Product product : products) {
	            totalAmountSpent += product.getTotalPrice();
	        }
	        return totalAmountSpent;
	    }
	}

Task-3

import java.util.Scanner;
	class Account {
	    private double balance;

	    // Constructor without arguments
	    public Account() {
	        this.balance = 0;
	    }

	    // Constructor with two arguments
	    public Account(double initialBalance) {
	        this.balance = initialBalance;
	    }

	    // Method to deposit amount to the account
	    public void deposit(double amount) {
	        balance += amount;
	        System.out.println("Amount deposited successfully.");
	    }

	    // Method to withdraw amount from the account
	    public void withdraw(double amount) {
	        if (amount <= balance) {
	            balance -= amount;
	            System.out.println("Amount withdrawn successfully.");
	        } else {
	            System.out.println("Insufficient balance.");
	        }
	    }

	    // Method to display the balance
	    public void displayBalance() {
	        System.out.println("Current balance: $" + balance);
	    }
	}

	public class Main {
	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);

	        // Creating an account object with no initial balance
	        Account account1 = new Account();

	        // Creating an account object with initial balance
	        System.out.print("Enter initial balance for account 2: $");
	        double initialBalance = scanner.nextDouble();
	        Account account2 = new Account(initialBalance);

	        // Performing operations on account 1
	        account1.deposit(100);
	        account1.displayBalance();
	        account1.withdraw(50);
	        account1.displayBalance();

	        // Performing operations on account 2
	        account2.displayBalance();
	        account2.withdraw(200);
	        account2.displayBalance();
	    }
	}

Task-4

class Person {
	    String name;
	    int age;
	    public Person(String name, int age) {
	        this.name = name;
	        this.age = age;
	    }
	}

	class Employee extends Person {
	    int employeeID;
	    double salary;

	    public Employee(String name, int age, int employeeID, double salary) {
	        super(name, age); // Using super to call the constructor of the superclass (Person)
	        this.employeeID = employeeID;
	        this.salary = salary;
	    }
	}

	public class Main {
	    public static void main(String[] args) {
	        Employee emp = new Employee("John", 30, 1234, 50000);
	        System.out.println("Employee Details:");
	        System.out.println("Name: " + emp.name+"Age: " + emp.age+"Employee ID: " + emp.employeeID+"Salary: $" + emp.salary);
	        
	}

}
